//===============================================================================
// Microsoft patterns & practices
// Smart Client Software Factory
//===============================================================================
// Copyright  Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================

//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-210-Creating%20a%20Smart%20Client%20Solution.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Threading;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace GlobalBank.Infrastructure.Interface.Commands
{
	public class CommandQueue: IDisposable
	{
		Queue<ICommand> _commandQueue;
		AutoResetEvent _newCommandsEvent = new AutoResetEvent(false);
		object _lockObject = new object();

		public CommandQueue()
		{
			_commandQueue = new Queue<ICommand>();
		}

		public WaitHandle NewCommandWaitHandle
		{
			get { return _newCommandsEvent; }
		}

		public void Add(ICommand command)
		{
			lock (_lockObject)
				_commandQueue.Enqueue(command);

			_newCommandsEvent.Set();
		}

		public void Run()
		{
			ICommand command;

			while (TryGetNextCommand(out command))
			{
				try
				{
					command.Execute();
				}
				catch (Exception ex)
				{
					ExceptionPolicy.HandleException(ex, "Default Policy");
				}

				IDisposable disp = command as IDisposable;

				if (disp != null)
					disp.Dispose();
			}
		}

		private bool TryGetNextCommand(out ICommand command)
		{
			command = null;

			lock (_lockObject)
			{
				if (_commandQueue.Count > 0)
					command = _commandQueue.Dequeue();
			}

			return (command != null);
		}

		~CommandQueue()
		{
			Dispose(false);
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				((IDisposable)_newCommandsEvent).Dispose();

				if (_commandQueue.Count > 0)
				{
					lock (_lockObject)
					{
						while (_commandQueue.Count > 0)
						{
							IDisposable cmd = _commandQueue.Dequeue() as IDisposable;
							if (cmd != null) cmd.Dispose();
						}
					}
				}
			}
		}

	}
}
