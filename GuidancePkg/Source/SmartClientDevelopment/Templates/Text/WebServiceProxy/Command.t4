<#@ template language="C#" #>
<#@ property processor="PropertyProcessor" name="ClassName" #>
<#@ property processor="PropertyProcessor" name="Namespace" #>
<#@ property processor="PropertyProcessor" name="ServiceMethod" #>
<#@ property processor="PropertyProcessor" name="FullyQualifiedServiceInterface" #>
<#@ property processor="PropertyProcessor" name="RootNamespace" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= Namespace #>
{
	/// <summary/>
	public class <#= ClassName #> : <#= RootNamespace #>.Infrastructure.Interface.Commands.Command<<#= FullyQualifiedServiceInterface #>>
	{
<# foreach(KeyValuePair<string, string> param in ServiceMethodParameters) { #>
		private <#= param.Key #> _<#= param.Value #>;
<# } #>

		/// <summary/>
		public <#= ClassName #>(<#= FullyQualifiedServiceInterface #> __service, int __timeout<#= GenerateConstructorParams() #>)
			: base(__service, __timeout)
		{
<# foreach(KeyValuePair<string, string> param in ServiceMethodParameters) { #>
			_<#= param.Value #> = <#= param.Value #>;
<# } #>
		}

		/// <summary/>
		protected override void DoExecute()
		{
			Service.<#= ServiceMethod["Name"] #>(<#= GetValuesList() #>);
		}
	}
}

<#+
	private IEnumerable<KeyValuePair<string, string>> ServiceMethodParameters
	{
		get { return (IEnumerable<KeyValuePair<string, string>>)ServiceMethod["Parameters"]; }
	}

	private string GetValuesList()
	{
		string result = "";

		foreach (KeyValuePair<string, string> param in ServiceMethodParameters)
			result += string.Format(", _{0}", param.Value);

		if (result.Length > 2)  
		result = result.Substring(2);

		return result;	
	}

	private string GenerateConstructorParams()
	{
		string result = "";

		foreach(KeyValuePair<string, string> parameter in ((IEnumerable)ServiceMethod["Parameters"]))
			result += string.Format(", {0} {1}", parameter.Key, parameter.Value);

		return result;
	}
#>