<#@ template language="C#" #>
<#@ property processor="PropertyProcessor" name="ClassName" #>
<#@ property processor="PropertyProcessor" name="ClassInterface" #>
<#@ property processor="PropertyProcessor" name="WsdlGeneratedService" #>
<#@ property processor="PropertyProcessor" name="WsdlGeneratedServiceInterface" #>
<#@ property processor="PropertyProcessor" name="Namespace" #>
<#@ property processor="PropertyProcessor" name="ProjectNamespace" #>
<#@ property processor="PropertyProcessor" name="Methods" #>
<#@ property processor="PropertyProcessor" name="RootNamespace" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using <#= RootNamespace #>.Infrastructure.Interface;

namespace <#= Namespace #>
{
	/// <summary/>
	public class <#= ClassName #> :  ServiceProxy<<#= Namespace #>.<#= WsdlGeneratedServiceInterface #>>, <#= Namespace #>.<#= ClassInterface #>
	{
		/// <summary/>
		public <#= ClassName #>()
			: this(new <#= Namespace #>.<#= WsdlGeneratedService #>())
		{
		}

		/// <summary/>
		public <#= ClassName #>(<#= Namespace #>.<#= WsdlGeneratedServiceInterface #> service)
			: base(service)
		{
		}
<# foreach(IDictionary<string, object> method in Methods) { #>

		/// <summary/>
		public void <#= method["Name"] #>(<#= GenerateParametersString(method) #>)
		{
			Queue.Add(new <#= Namespace #>.Commands.<#= method["Name"] #>Command(Service, <#= GenerateCommandArguments(method) #>));
		}
<# } #>
	}
}

<#+
	string GenerateParametersString(IDictionary<string, object> methodDef)
	{
		string result = "int timeout";

		foreach(KeyValuePair<string, string> parameter in ((IEnumerable)methodDef["Parameters"]))
			result += string.Format(", {0} {1}", parameter.Key, parameter.Value);

		if(methodDef["ReturnType"].ToString().ToLowerInvariant() != "void")
			result += string.Format(", {1}.Commands.{0}Command.CallbackType callback", methodDef["Name"], Namespace);

		return result;
	}

	string GenerateCommandArguments(IDictionary<string, object> methodDef)
	{
		string result = "timeout";

		foreach(KeyValuePair<string, string> parameter in ((IEnumerable)methodDef["Parameters"]))
			result += string.Format(", {0}", parameter.Value);

		if(methodDef["ReturnType"].ToString().ToLowerInvariant() != "void")
			result += ", callback";

		return result;
	}
#>