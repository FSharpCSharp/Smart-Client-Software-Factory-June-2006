<#@ template language="C#" #>
<#@ property processor="PropertyProcessor" name="ClassName" #>
<#@ property processor="PropertyProcessor" name="Namespace" #>
<#@ property processor="PropertyProcessor" name="Methods" #>
<#@ property processor="PropertyProcessor" name="RootNamespace" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using <#= RootNamespace #>.Infrastructure.Interface.Commands;

namespace <#= Namespace #>
{
	/// <summary/>
	public interface <#= ClassName #> : ISupportsTimeout
	{
<# foreach(IDictionary<string, object> method in Methods) { #>
		/// <summary/>
		<#= method["ReturnType"] #> <#= method["Name"] #>(<#= GenerateParametersString(method) #>);
<# } #>
	}
}

<#+
	string GenerateParametersString(IDictionary<string, object> methodDef)
	{
		string result = "";

		foreach(KeyValuePair<string, string> parameter in ((IEnumerable)methodDef["Parameters"]))
			result += string.Format(", {0} {1}", parameter.Key, parameter.Value);
		if (result.Length > 2) result = result.Substring(2);
		return result;
	}
#>